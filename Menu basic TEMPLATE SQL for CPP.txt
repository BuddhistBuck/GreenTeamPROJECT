//program: menu base SQL add invoice
//author: Brian Chamberlain
//update : 11.30.2021
//goal: to add a function for invoice and transactional updates. as best we can
// in c++ to XSQL prepared statements

#include <iostream>
#include <string>
#include <iomanip>
#include <climits>
#include "sqlite3.h"

using namespace std;

void printMainMenu();
void viewInvoice(sqlite3 *);
void viewCustomer(sqlite3 *);
void addInvoice(sqlite3 *);
void getpcode(string&);
int mainMenu();
  void setUpdate(int prodCode, string custID, string date_buy, string QOH, string pcode, string balance, sqlite3* db);
int main()
{
	int choice;

	sqlite3 *mydb;

	int rc; 

	rc = sqlite3_open_v2("SaleCo.db", &mydb, SQLITE_OPEN_READWRITE, NULL);
	if(rc != SQLITE_OK){
		//if the database cannot be opened
		cout << "Error in connection: " << sqlite3_errmsg(mydb);
		return 1;
	}
	
	cout << "Welcome to SaleCo" << endl;
	choice = mainMenu();
	while (true)
	{
		switch (choice) 
		{
			case 1: viewInvoice(mydb); break;
			case 2: viewCustomer(mydb); break;
			case 3: addInvoice(mydb); break;
			case -1: 
			{
				//don't forget to close.
				sqlite3_close(mydb);
				return 0;
			}
			default: cout << "That is not a valid choice." << endl;
		}
		cout << "\n\n";
		choice = mainMenu();
	}

}

void printMainMenu() 
{
	cout << "Please choose an option (enter -1 to quit):  " << endl;
	cout << "1. View an invoice" << endl;
	cout << "2. View Customer Information" << endl;
	cout << "3. Add an invoice" << endl; 
	cout << "Enter Choice: ";
}

int mainMenu()
{
	int choice = 0;
	
	printMainMenu();
	cin >> choice;
	while ((!cin || choice < 1 || choice > 4) && choice  != -1)
	{		
		if (!cin)
		{
			cin.clear();
			cin.ignore(INT_MAX,'\n');
		}
		cout << "That is not a valid choice." << endl << endl;
		printMainMenu();
		cin >> choice;
	} 
	return choice;
}

void viewInvoice(sqlite3 * db)
{
	string query = "SELECT INVOICE.INV_NUMBER, INVOICE.INV_DATE, CUSTOMER.CUS_FNAME, CUSTOMER.CUS_LNAME ";
	query += "FROM INVOICE JOIN CUSTOMER ON INVOICE.CUS_CODE = CUSTOMER.CUS_CODE;";
	sqlite3_stmt *pRes;
	string m_strLastError;
	string query2;
	string inv_number;
	string inv_date;
	string cus_fname,cus_lname;
	if (sqlite3_prepare_v2(db, query.c_str(), -1, &pRes, NULL) != SQLITE_OK)
	{
		m_strLastError = sqlite3_errmsg(db);
		sqlite3_finalize(pRes);
		cout << "There was an error: " << m_strLastError << endl;
		return;
	}
	else
	{
		cout << "Please choose the invoice you want to see:" << endl;
		int columnCount = sqlite3_column_count(pRes);
		int i = 1, choice;
		sqlite3_stmt *pRes2;
		cout << left;
		while (sqlite3_step(pRes) == SQLITE_ROW)
		{
			cout << i << ". " << sqlite3_column_text(pRes, 0);
			cout << endl;
			i++;
		}
		
		//Fixed a bug where going outside the bounds of the choices would NOT
		//stop the program from proceeding and would crash with a segmentation fault.
		while(!(cin >> choice) || choice < 1 || choice > (i - 1)){
			if(!cin){
				cin.clear();
				cin.ignore(INT_MAX, '\n');
			}
			cout << "That is not a valid choice! Try again!" << endl;
		}

		sqlite3_reset(pRes);
		for (int i = 0; i < choice; i++)
			sqlite3_step(pRes);
		inv_number = reinterpret_cast<const char*>(sqlite3_column_text(pRes, 0));
		inv_date = reinterpret_cast<const char*>(sqlite3_column_text(pRes,1));
		cus_fname = reinterpret_cast<const char*>(sqlite3_column_text(pRes,2));
		cus_lname = reinterpret_cast<const char*>(sqlite3_column_text(pRes,3));
		sqlite3_finalize(pRes);
		query2 = "SELECT PRODUCT.P_DESCRIPT as Product ,LINE.LINE_PRICE as Price, LINE.LINE_UNITS as Units ";
		query2 += "FROM LINE ";
		query2 += "JOIN PRODUCT on line.P_CODE = PRODUCT.P_CODE  ";
		query2 += "WHERE LINE.INV_NUMBER = '" + inv_number + "';";

		if (sqlite3_prepare_v2(db, query2.c_str(), -1, &pRes2, NULL) != SQLITE_OK)
		{
			m_strLastError = sqlite3_errmsg(db);
			sqlite3_finalize(pRes2);
			cout << "There was an error: " << m_strLastError << endl;
			return;
		}
		else
		{
			cout << "Invoice #: " << inv_number << endl;
			cout << "Invoice Date: " << inv_date << endl;
			cout << "Customer: " << cus_fname << " " << cus_lname << endl;
			columnCount = sqlite3_column_count(pRes2);
			cout << left;
			for (int i = 0; i < columnCount; i++)
			{
				cout << "|" << setw(25) << sqlite3_column_name(pRes2, i);
			}
			cout << "|" << endl;
			
			while (sqlite3_step(pRes2) == SQLITE_ROW)
			{
				for (int i = 0; i < columnCount; i++)
				{
					if (sqlite3_column_type(pRes2, i) != SQLITE_NULL)
						cout << "|" << setw(25) << sqlite3_column_text(pRes2, i);
					else
						cout << "|" << setw(25) << " ";
				}
				cout << "|" << endl;
			}
			sqlite3_finalize(pRes2);
		}

	}
}

void viewCustomer(sqlite3 *db)
{
	
	string cusID, firstName, lastName, initial, phoneNum, areaCode, balance;
	balance = "$";
	
	//Note I decided to use query string concatenation to simplify the programatic process
	//And also grab the customer code by itself, for use in the second query.
	string query = "SELECT CUS_CODE || \" - \" || CUS_LNAME || \", \" || CUS_FNAME AS 'CUSTOMER', CUS_CODE FROM CUSTOMER ORDER BY CUS_CODE ASC";
	sqlite3_stmt *firstStatement;
	
	if(sqlite3_prepare_v2(db, query.c_str(), -1, &firstStatement, NULL) != SQLITE_OK){
		//When an error occurs preparing the first statement...
		string err = sqlite3_errmsg(db);
		sqlite3_finalize(firstStatement);
		cout << "There was an error: " << err << endl;
		return;
		
	}else{
		cout << "Please choose the customer you want to see:\n" ;
		int choice;
		int i = 1;
		
		while(sqlite3_step(firstStatement) == SQLITE_ROW){
			//print first query results.
			cout << i++ << ". " << sqlite3_column_text(firstStatement, 0) << endl;
		}
		
		//get input and test for improper values.
		while(!(cin >> choice) || (choice > (i - 1)) || choice < 1){
			if(!cin){
				cin.clear();
				cin.ignore(INT_MAX, '\n');
			}
			
			cout << "That is not a valid choice! Try again!" << endl;
		}
		
		//reset the statement and iterate to the choice.
		sqlite3_reset(firstStatement);
		for(int i = 0; i < choice; i++){
			sqlite3_step(firstStatement);
		}
		
		//retrieve our customer id, then craft our new query and prepare our next statement.
		cusID = reinterpret_cast<const char*>(sqlite3_column_text(firstStatement, 1));
		sqlite3_finalize(firstStatement);
		
		string query2 = "SELECT * FROM CUSTOMER WHERE CUS_CODE = ";
		query2 += cusID += ";";
		
		sqlite3_stmt *secondStatement;
		if(sqlite3_prepare_v2(db, query2.c_str(), -1, &secondStatement, NULL) != SQLITE_OK){
			//When an error occurs preparing the second statement...
			string err = sqlite3_errmsg(db);
			sqlite3_finalize(secondStatement);
			cout << "There was an error: " << err << endl;
			return;
		}
		
		else{
			//Since we have verified programatically that we should have a result here,
			//we step once without checking that it is valid.
			sqlite3_step(secondStatement);
				
			lastName = reinterpret_cast<const char*>(sqlite3_column_text(secondStatement, 1));
			firstName = reinterpret_cast<const char*>(sqlite3_column_text(secondStatement, 2));
				
			//we have to test to see if this column that CAN be empty is.
			//otherwise it will crash if you try to get results from someone without
			//an initial!
			if(!(sqlite3_column_type(secondStatement, 3) == SQLITE_NULL)){
				initial = reinterpret_cast<const char*>(sqlite3_column_text(secondStatement, 3));
			}
				
			areaCode = reinterpret_cast<const char*>(sqlite3_column_text(secondStatement, 4));
			phoneNum = reinterpret_cast<const char*>(sqlite3_column_text(secondStatement, 5));
			balance += reinterpret_cast<const char*>(sqlite3_column_text(secondStatement, 6));
				
			sqlite3_finalize(secondStatement);
				
			cout << "----Customer Information----\n";
			if(initial != "") cout << "Name: " << firstName << " " << initial << ". " << lastName;
			else cout << "Name: " << firstName << " " << lastName;
			cout << "\nPhone Number: (" << areaCode << ")" << phoneNum
			<< "\nBalance: " << balance;
			
			return;
		}
	}
}



void addInvoice(sqlite3 *db)
{	
	string cusID, firstName, lastName, date_buy, moreBuy,  QOH, choice, sprice;
      string pcode, balance;
//	balance = "$";
	sqlite3_stmt *pRes;
	string m_strLastError;
	string query2, query3;
	string inv_number;
	string inv_date;
	string cus_fname,cus_lname, custID2;
	int columnCount, prodCode, price, k, l, n;
	
	//Note I decided to use query string concatenation to simplify the programatic process
	//And also grab the customer code by itself, for use in the second query.
	string query = "SELECT CUS_CODE || \" - \" || CUS_LNAME || \", \" || CUS_FNAME AS 'CUSTOMER', CUS_CODE FROM CUSTOMER ORDER BY CUS_CODE ASC";
	sqlite3_stmt *firstStatement;
	
	if(sqlite3_prepare_v2(db, query.c_str(), -1, &firstStatement, NULL) != SQLITE_OK){
		//When an error occurs preparing the first statement...
		string err = sqlite3_errmsg(db);
		sqlite3_finalize(firstStatement);
		cout << "There was an error: " << err << endl;
		return;
		
	}else{
		cout << "Please choose the customer for the invoice:\n" ;
		int choice;
		int i = 1;
		
		while(sqlite3_step(firstStatement) == SQLITE_ROW){
			//print first query results.
			cout << i++ << ". " << sqlite3_column_text(firstStatement, 0) << endl;
		}
		
		//get input and test for improper values.
		while(!(cin >> choice) || (choice > (i - 1)) || choice < 1){
			if(!cin){
				cin.clear();
				cin.ignore(INT_MAX, '\n');
			}
			
			cout << "That is not a valid choice! Try again!" << endl;
		}
		
		//reset the statement and iterate to the choice.
		sqlite3_reset(firstStatement);
		for(int i = 0; i < choice; i++){
			sqlite3_step(firstStatement);
		}
		
		//retrieve our customer id, then craft our new query and prepare our next statement.
		cusID = reinterpret_cast<const char*>(sqlite3_column_text(firstStatement, 1));
		sqlite3_finalize(firstStatement);
		
		string query2 = "SELECT * FROM CUSTOMER WHERE CUS_CODE = ";
		query2 += cusID += ";";
		
		custID2 = cusID; // stores for later
		
		sqlite3_stmt *secondStatement;
		if(sqlite3_prepare_v2(db, query2.c_str(), -1, &secondStatement, NULL) != SQLITE_OK){
			//When an error occurs preparing the second statement...
			string err = sqlite3_errmsg(db);
			sqlite3_finalize(secondStatement);
			cout << "There was an error: cuscode " << err << endl;
			return;
		}
		
		else{
			//Since we have verified programatically that we should have a result here,
			//we step once without checking that it is valid.
			sqlite3_step(secondStatement);
				
			lastName = reinterpret_cast<const char*>(sqlite3_column_text(secondStatement, 1));
			firstName = reinterpret_cast<const char*>(sqlite3_column_text(secondStatement, 2));
			balance = reinterpret_cast<const char*>(sqlite3_column_text(secondStatement, 6));

     
		}//end else
}

cout << "Enter a date for the invoice in the form yyyy-mm-dd: " ;
cin >> date_buy;

//product code display and choose
do {
  	string query = "SELECT P_CODE, P_DESCRIPT ";
  	query += "FROM PRODUCT ORDER BY P_CODE ASC";
	sqlite3_stmt *firstStatement;
	sqlite3_stmt *pRes;
		sqlite3_stmt *pRes2;
	
	if(sqlite3_prepare_v2(db, query.c_str(), -1, &firstStatement, NULL) != SQLITE_OK){
		//When an error occurs preparing the first statement...
		string err = sqlite3_errmsg(db);
		sqlite3_finalize(firstStatement);
		cout << "There was an error: pco" << err << endl;
		return;
		
	}else{
		cout << "Please choose the PRODUCT for the invoice:\n" ;
		int choice;
		int i = 1;
		
		while(sqlite3_step(firstStatement) == SQLITE_ROW){
			//print first query results.
			cout << i++ << ". " << sqlite3_column_text(firstStatement, 0);
			cout << " - "<< sqlite3_column_text(firstStatement, 1) << endl;
	
		}
		
		//get input and test for improper values.
		while(!(cin >> choice) || (choice > (i - 1)) || choice < 1){
			if(!cin){
				cin.clear();
				cin.ignore(INT_MAX, '\n');
			}
			
			cout << "That is not a valid choice! Try again!" << endl;
		}
		
		//reset the statement and iterate to the choice.
		sqlite3_reset(firstStatement);
		for(int i = 0; i < choice; i++){
			sqlite3_step(firstStatement);
		}
	
		
			cusID = reinterpret_cast<const char*>(sqlite3_column_text(firstStatement, 0));
			
			lastName = reinterpret_cast<const char*>(sqlite3_column_text(firstStatement, 1));
	
               
		/*
			QOH = reinterpret_cast<const char*>(sqlite3_column_text(firstStatement, 3));
			
		
			
*/


		sqlite3_finalize(firstStatement);
		
	
	pcode = cusID;
	
	
	

		string query2 = "SELECT * FROM PRODUCT WHERE P_CODE = \'" ;
		query2 += pcode;
		query2 += "\';";
	//	cout << query2;
		//why is it only searching for text char instead of full cusID?nosuchcolumnQQ2 when searching for product 4
	//	cout << cusID << endl;
		
   // cout << "NEW: "<< pcode<< "OLD: "<< cusID;
//		cout << pcode << endl;
		
	//	query2 += pcode;
	//	query2 += ";";
		
		sqlite3_stmt *secondStatement;
		if(sqlite3_prepare_v2(db, query2.c_str(), -1, &secondStatement, NULL) != SQLITE_OK){
			//When an error occurs preparing the second statement...
			string err = sqlite3_errmsg(db);
			sqlite3_finalize(secondStatement);
			cout << "There was an error: p_code " << err << endl;
				
			return;
		}
		
		else{
			//Since we have verified programatically that we should have a result here,
			//we step once without checking that it is valid.
				sqlite3_step(secondStatement);
		/*		
			lastName = reinterpret_cast<const char*>(sqlite3_column_text(secondStatement, 0));
			firstName = reinterpret_cast<const char*>(sqlite3_column_text(secondStatement, 1));
		*/	
		
		//product description place holder variable
				lastName = reinterpret_cast<const char*>(sqlite3_column_text(firstStatement, 1));

				
		inv_date =	reinterpret_cast<const char*>(sqlite3_column_text(firstStatement, 2));
			
			QOH = reinterpret_cast<const char*>(sqlite3_column_text(firstStatement, 3));
			
			
               sprice = reinterpret_cast<const char*>(sqlite3_column_text(firstStatement, 5)); 
               
cout << inv_date << QOH << sprice<<lastName<<endl;
               
			

	//	cout << lastName<<" : " <<firstName<<endl;
 

cout <<"\nHow many would you like? (Quantity on hand: " <<reinterpret_cast<const char*>(sqlite3_column_text(firstStatement, 3))<<"): " ;
 cin >> choice;
 
 
/* 
QOH = reinterpret_cast<const char*>(sqlite3_column_text(firstStatement, 3));
sprice = reinterpret_cast<const char*>(sqlite3_column_text(firstStatement, 5)); 
*/
//cout << sprice;

//cout <<"QOH: " << QOH << endl;
		prodCode = stoi(QOH) - choice;
		QOH = prodCode;
		//	sprice = choice * stoi(sprice);
	//	cout << "newq:" << prodCode << sprice<< endl;
	
 /*if (choice > stoi(QOH)){
      
      cout << "That is not a valid quantity.  Please try again or enter -1 to quit and roll back."<< endl;
     cin.clear();
     cin.ignore(255, '\n');
     cout <<"How many would you like? (Quantity on hand: " + QOH + " ): ";
 cin >> choice;
 }
 */
 
 //store QOH choice invoice times prices update
     price = choice;
     
     
		}}
     
    cout << "Would you like to enter another product? y or n: " ;
    cin >>choice;
    
}while((choice != "n") && (choice != "-1"));

    
//update with inserts and query to add subtract the qoh and check the qmin is not reached without an error statement, but cant get to read pcode with - sign
     
//create transaction using data above reinterprets.?
//commit SQL to write in values
//cout << "Successfully inserted invoice " <<endl;

 //setUpdate(prodCode, custID2, date_buy,  QOH, pcode, balance, db);

/*
insert into invoice 
values (1009invnum,cuscode, invdate )
update set QOH = newQ where prodcode = pcode
update CUSTOMER set cus_balance = custbalance - (coice*price)
where cust_code = cusID;
commit;*/
//update LINE?? if i have time
    //inv_number = stoi(inv_number) + 1;
//
/*
    void setUpdate(int prodCode, string custID, string date_buy, string QOH, string pcode, string balance, sqlite3* db){
         prodCode=prodCode;
         custID=custID;
         date_buy=date_buy;
         QOH= QOH;
         pcode = pcode;
         balance=balance;
         string query3, custID2 ;*/
         
         
    date_buy="2020-03-03";
		query3 = "insert into INVOICE values (\'";
		query3 += inv_number.c_str();
	//how to get invnum from //reinterpret and add one each time to table
	
		query3 += "\', \'" ;
	     //query3 += ;
		query3 += custID2;
		query3 += "\', \'";
		query3 += date_buy;
		query3 += "\'";
		query3 += "); ";
		
		
	query3 += "update PRODUCT set P_QOH = \'";
		query3 += QOH.c_str();
		query3 += "\' where P_CODE = \'";
		query3 += pcode;
		query3 += "\';"  ;
		
		for(int i =0; i < price; i++){
		k= stoi(sprice);
     		k =  k + k;} //price loop for choice number of times
		
		balance = balance + sprice;
		//- ((stoi(moreBuy)) * (stoi(sprice))));
	query3 += "update CUSTOMER set CUS_BALANCE = ";
		query3 += balance ;
		query3 += " where CUS_CODE = ";
		query3 += custID2;
		query3 += ";"  ;
		///////////////////////
	//	query3 += " COMMIT;"  ;
		////////////////////////
		cout <<query3<<endl;
		
//	cout << "Successfully inserted invoice " <<endl;	
		//split here to avoid commit too early,
		//rollback available on else

		
		sqlite3_stmt *secondStatement;
		if(sqlite3_prepare_v2(db, query3.c_str(), -1, &secondStatement, NULL) != SQLITE_OK){
		
			string err = sqlite3_errmsg(db);
			sqlite3_finalize(secondStatement);
			cout << "There was an error: updates " << err << endl;
				
			return;
		}
		
		else{
		
		
				sqlite3_step(secondStatement);
			cout << "Successfully inserted invoice " <<endl;	
		     
		}


     //need to get roll back and commits entered but didnt want ot corrupt db while 
     //testing my queries and stuff in mimir, i wouldnt know how to drop rows 
     //with saleCo


}//end of functionaddinvocice


